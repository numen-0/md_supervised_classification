#!/bin/sh

set -eu


# Default values
test=false
force=false

print_help() {
    cat <<EOF
Usage: bob [OPTIONS]

OPTIONS:
    -t, --test
        run programs with smaller size data
    -f, --force
        force re-run of all programs
    -h, --help
        print this help message and exit
EOF
}

# Parse arguments
while [ $# -gt 0 ]; do
  case "$1" in
    -t|--test) test=true ;;
    -f|--force) force=true ;;
    -h|--help)
        print_help
        exit 0
        ;;
    *)
        echo "Unknown argument: $1" >&2
        print_help >&2
        exit 1
        ;;
    esac
    shift 1
done

# vars ########################################################################
CSV="./data/raw/DataI_MD.csv"
if [ "$test" = "true" ]; then
    PRE_OUT_DIR="./data/test_dataset"
    PRE_ARGS="-s 70/20/10 -c 70"
    VEC_OUT_DIR="./data/test_vectorized"
else
    PRE_OUT_DIR="./data/dataset"
    PRE_ARGS="-s 70/20/10"
    VEC_OUT_DIR="./data/vectorized"
fi

## func #######################################################################
C1="\e[32;1m"
C2="\e[92m"
C3="\e[95m"
R="\e[0m"
bob_say() {
    printf "${C2}[bob]${R}: %s\n" "$1"
}
bob_cmd() {
    printf "${C3}%s${R}\n" "$1"
}

## script #####################################################################
printf "${C1}%s${R}\n" "bob is cooking (⌐■_■)"

## env
bob_say "activating env"
bob_cmd ". ./sklearn-env/bin/activate"
. ./venv/bin/activate

## preprocess
if [ -d "$PRE_OUT_DIR" ] && [ "$force" != true ]; then
    bob_say "skipping preprocess"
else
    bob_say "doing preprocess"
    bob_cmd "python ./preprocess.py $PRE_ARGS $CSV -o $PRE_OUT_DIR"
    time python ./preprocess.py $PRE_ARGS "$CSV" -o "$PRE_OUT_DIR"
fi

## vect
if [ -d "$VEC_OUT_DIR" ] && [ "$force" != true ]; then
    bob_say "skipping vectorization"
else
    BOW_FILE=$VEC_OUT_DIR/bow/BoW.csv
    bob_say "generating BoW"
    bob_cmd "python vectorization.py -i $PRE_OUT_DIR/train.csv -o $BOW_FILE -g"
    time python vectorization.py -i $PRE_OUT_DIR/train.csv -o $BOW_FILE -g

    bob_say "doing vectorization"
    for f in train.csv dev.csv test.csv; do
        # SpaCy
        bob_cmd "python vectorization.py \\
    -i $PRE_OUT_DIR/$f \\
    -o $VEC_OUT_DIR/spacy/$f"
        time python vectorization.py \
            -i $PRE_OUT_DIR/$f \
            -o $VEC_OUT_DIR/spacy/$f
        # BoW
        bob_cmd "python vectorization.py \\
    -i $PRE_OUT_DIR/$f \\
    -o $VEC_OUT_DIR/bow/$f \\
    -m 'bow' -v $BOW_FILE"
        time python vectorization.py \
            -i $PRE_OUT_DIR/$f \
            -o $VEC_OUT_DIR/bow/$f \
            -m 'bow' -v $BOW_FILE
    done
fi

## ...

printf "${C1}%s${R}\n" "bob cooked (⌐■_■)"

